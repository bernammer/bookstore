// const products = [];
const fs = require('fs');
const path = require('path');
const rootDir = require('../utils/paths');
const { json } = require('express');
const Cart = require('./cartfromfile')
const p = path.join(
    // path.dirname(process.mainModule.filename)
    rootDir,
    'data',
    'products.json'
);
const getProductsFromFile = cb => {

    fs.readFile(p, (err, fileContent) => {
        if (err) {
            cb([]);
        } else {
            cb(JSON.parse(fileContent));
        }
    });
};
module.exports = class Product {
    constructor(id, title, imageUrl, price, description) {
        this.id = id;
        this.title = title;
        this.imageUrl = imageUrl;
        this.price = price;
        this.description = description;
    }
    save() {
        // products.push(this);
        getProductsFromFile(products => {
            if (this.id) {
                const existingProductIndex = products.findIndex(
                    prod => prod.id === this.id
                );
                console.log(existingProductIndex);
                const updatedProducts = [...products];
                updatedProducts[existingProductIndex] = this;
                fs.writeFile(p, JSON.stringify(updatedProducts), err => {
                    console.log(err);
                });
            } else {
                this.id = Math.random().toString();
                products.push(this);
                fs.writeFile(p, JSON.stringify(products), err => {
                    console.log(err);
                });
            }
        });
    };
    static deleteById(id) {
        getProductsFromFile(products => {
            const updatedProducts = products.filter(prod => prod.id === id);
            fs.writeFile(p, JSON.stringify(updatedProducts), err => {
                if (!err) {

                }
            })
        })
    }
    static fetchAll(cb) {
        getProductsFromFile(cb);
    }

    static findById(id, cp) {
        getProductsFromFile(products => {
            let product = products.find(p => p.id === id);
            cp(product);
        });
    }

};